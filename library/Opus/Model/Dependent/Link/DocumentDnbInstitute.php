<?php
/*
 * This file is part of OPUS. The software OPUS has been originally developed
 * at the University of Stuttgart with funding from the German Research Net,
 * the Federal Department of Higher Education and Research and the Ministry
 * of Science, Research and the Arts of the State of Baden-Wuerttemberg.
 *
 * OPUS 4 is a complete rewrite of the original OPUS software and was developed
 * by the Stuttgart University Library, the Library Service Center
 * Baden-Wuerttemberg, the Cooperative Library Network Berlin-Brandenburg,
 * the Saarland University and State Library, the Saxon State Library -
 * Dresden State and University Library, the Bielefeld University Library and
 * the University Library of Hamburg University of Technology with funding from
 * the German Research Foundation and the European Regional Development Fund.
 *
 * LICENCE
 * OPUS is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the Licence, or any later version.
 * OPUS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details. You should have received a copy of the GNU General Public License
 * along with OPUS; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * @category    Framework
 * @package     Opus\Model
 * @author      Pascal-Nicolas Becker <becker@zib.de>
 * @author      Jens Schwidder <schwidder@zib.de>
 * @copyright   Copyright (c) 2008-2018, OPUS 4 development team
 * @license     http://www.gnu.org/licenses/gpl.html General Public License
 */

namespace Opus\Model\Dependent\Link;

use Opus\Model\Field;
use Opus\Model\ModelException;

/**
 * Abstract class for link DnbInstitute model in the Opus framework.
 *
 * @category    Framework
 * @package     Opus\Model
 *
 * @method void setName(string $name)
 * @method string getName()
 *
 * @method void setDepartment(string $department)
 * @method string getDepartment()
 *
 * @method void setAddress(string $address)
 * @method string getAddress()
 *
 * @method void setCity(string $city)
 * @method string getCity()
 *
 * @method void setPhone(string $phone)
 * @method string getPhone()
 *
 * @method void setDnbContactId(string $contactId)
 * @method string getDnbContactId()
 *
 * @method void setIsGrantor(boolean $isGrantor)
 * @method boolean getIsGrantor()
 *
 * @method void setIsPublisher(boolean $isPublisher)
 * @method boolean getIsPublisher()
 *
 * @method void setRole(string $role)
 * @method string getRole()
 */
class DocumentDnbInstitute extends AbstractLinkModel
{

    /**
     * Specify then table gateway.
     *
     * @var string Classname of \Zend_DB_Table to use if not set in constructor.
     */
    protected static $_tableGatewayClass = 'Opus\Db\LinkDocumentsDnbInstitutes';

    /**
     * Primary key of the parent model.
     *
     * @var mixed $_parentId.
     */
    protected $_parentColumn = 'document_id';

    /**
     * The linked model's foreign key.
     *
     * @var mixed
     */
    protected $_modelKey = 'dnb_institute_id';

    /**
     * The class of the model that is linked to.
     *
     * @var string
     */
    protected $_modelClass = 'Opus\DnbInstitute';

    /**
     * Fields that should not be displayed on a form.
     *
     * @var array  Defaults to array('File').
     */
    protected $_internalFields = ['Role'];

    /**
     * Initialize model with the following values:
     * - DnbInstitute
     * - Role
     *
     * @return void
     */
    protected function _init()
    {
        $modelClass = $this->_modelClass;
        if (is_null($this->getId()) === false) {
            $this->setModel(new $modelClass($this->_primaryTableRow->{$this->_modelKey}));
        } else {
            $this->setModel(new $modelClass());
        }

        $role = new Field('Role');
        $this->addField($role);
    }

    /**
     * Persist foreign model & link.
     *
     * @return void
     */
    public function store()
    {
        $this->_primaryTableRow->dnb_institute_id = $this->_model->store();
        // only store if something has changed
        // this avoids duplicate entries
        if ($this->getId() !== $this->_primaryTableRow->{$this->_modelKey}) {
            parent::store();
        }
    }

    /**
     * Updates model fields from an array of data.
     *
     * The 'Role' field is internal and cannot be set directly. However it is part of the array
     * generated by 'toArray'. It needs to be ignored when populating a model from an array. If
     * an institute is grantor or publisher for a document is determined by the field it is
     * associated with, ThesisGrantor or ThesisPublisher. Both fields are stored in the same
     * database table. Therefore the additional internal field.
     *
     * TODO change Role field behaviour?
     * TODO the implementation does not feel clean - Why?
     *
     * @param $data
     * @throws ModelException
     */
    public function updateFromArray($data)
    {
        if (isset($data['Role'])) {
            unset($data['Role']);
        }

        parent::updateFromArray($data);
    }
}
